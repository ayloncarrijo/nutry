// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Measurement {
  ML
  L
  KG
  G
  UN
}

model User {
  name               String   @id
  weight             Float    @default(65)
  carbohydratesPerKg Float    @default(2)
  fatsPerKg          Float    @default(1)
  proteinsPerKg      Float    @default(1.5)
  dailyDiet          Diet     @relation("dailyDiet", fields: [dailyDietId], references: [id])
  dailyDietId        String   @unique
  goalDiet           Diet     @relation("goalDiet", fields: [goalDietId], references: [id])
  goalDietId         String   @unique
  recipes            Recipe[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Food {
  id            String         @id @default(uuid())
  attachedFoods AttachedFood[]
  measurement   Measurement
  proportion    Float
  name          String
  carbohydrates Float
  fats          Float
  proteins      Float
  reference     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Recipe {
  id              String           @id @default(uuid())
  attachedFoods   AttachedFood[]
  attachedRecipes AttachedRecipe[]
  name            String
  user            User             @relation(fields: [createdBy], references: [name])
  createdBy       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Diet {
  id               String           @id @default(uuid())
  attachedFoods    AttachedFood[]
  attachedRecipes  AttachedRecipe[]
  createdAsDailyBy User?            @relation("dailyDiet")
  createdAsGoalBy  User?            @relation("goalDiet")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model AttachedFood {
  id        String   @id @default(uuid())
  quantity  Int
  food      Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId    String
  recipe    Recipe?  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String?
  diet      Diet?    @relation(fields: [dietId], references: [id], onDelete: Cascade)
  dietId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttachedRecipe {
  id        String   @id @default(uuid())
  quantity  Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String
  diet      Diet     @relation(fields: [dietId], references: [id], onDelete: Cascade)
  dietId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
